"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sharedModulesPlugin = exports.defaultSharedModules = void 0;
const core_1 = require("@babel/core");
const babel_plugin_rewrite_module_path_1 = __importDefault(require("babel-plugin-rewrite-module-path"));
const path_1 = __importDefault(require("path"));
exports.defaultSharedModules = {
    subpath: '',
    nodeModules: 'node_modules',
    sourceMap: true,
};
const sharedModulesPlugin = (sharedModulesPluginOption) => {
    const { packageName, subpath, nodeModules, sourceMap } = Object.assign(Object.assign({}, exports.defaultSharedModules), sharedModulesPluginOption);
    const sharedModulesString = path_1.default.join(packageName, subpath);
    const nodeModulesString = path_1.default.join(packageName, nodeModules);
    return ({
        name: 'sharedModulesPlugin',
        transform(src) {
            var _a, _b;
            return __awaiter(this, void 0, void 0, function* () {
                if (src.includes(sharedModulesString)) {
                    const rewriteModulePathOptions = {
                        rewriteMapper: {
                            [sharedModulesString]: nodeModulesString
                        }
                    };
                    const transformed = yield (0, core_1.transformAsync)(src, {
                        sourceMaps: sourceMap ? true : false,
                        plugins: [
                            [babel_plugin_rewrite_module_path_1.default, rewriteModulePathOptions]
                        ]
                    });
                    return {
                        code: (_a = transformed === null || transformed === void 0 ? void 0 : transformed.code) !== null && _a !== void 0 ? _a : undefined,
                        map: (_b = transformed === null || transformed === void 0 ? void 0 : transformed.map) !== null && _b !== void 0 ? _b : undefined,
                    };
                }
                return;
            });
        },
    });
};
exports.sharedModulesPlugin = sharedModulesPlugin;
